import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from docx import Document
from docx.shared import Inches, Pt
from docx.oxml import OxmlElement
from docx.oxml.ns import qn
from datetime import datetime

# Function to create Word report
def create_word_report(df_summary, chart_buf, pie_chart_buf, total_checks):
    doc = Document()

    doc.add_heading('B√°o C√°o ƒê√°nh Gi√° C√¥ng T√°c Ki·ªÉm Tra √Åp Gi√°', 0)

    # Add Summary
    doc.add_heading('1. T·ªïng quan:', level=1)
    doc.add_paragraph(f'T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra to√†n c√¥ng ty: {total_checks:,} l∆∞·ª£t.')
    if total_checks == 0:
        doc.add_paragraph("Ch∆∞a c√≥ d·ªØ li·ªáu ki·ªÉm tra.")
    else:
        doc.add_paragraph("B√°o c√°o th·ªÉ hi·ªán so s√°nh gi·ªØa s·ªë kh√°ch h√†ng c√≥ thay ƒë·ªïi v√† t·ªïng s·ªë l∆∞·ª£t ki·ªÉm tra t·∫°i t·ª´ng ƒëi·ªán l·ª±c. T·ª∑ l·ªá thay ƒë·ªïi ƒë∆∞·ª£c th·ªÉ hi·ªán trong b·∫£ng v√† bi·ªÉu ƒë·ªì b√™n d∆∞·ªõi.")

    # Th√™m nh·∫≠n x√©t v·ªÅ top 3 v√† bottom 3 (tr∆∞·ªõc khi ƒë·ªïi t√™n c·ªôt)
    top_3 = df_summary.sort_values(by='T·ª∑ l·ªá thay ƒë·ªïi (%)', ascending=False).head(3)
    bottom_3 = df_summary.sort_values(by='T·ª∑ l·ªá thay ƒë·ªïi (%)', ascending=True).head(3)

    doc.add_heading('2. ƒê√°nh gi√° n·ªïi b·∫≠t:', level=1)
    doc.add_paragraph("- C√°c ƒëi·ªán l·ª±c c√≥ t·ª∑ l·ªá thay ƒë·ªïi cao nh·∫•t:")
    for idx, row in top_3.iterrows():
        doc.add_paragraph(f"  ‚Ä¢ {row['Area']}: {row['T·ª∑ l·ªá thay ƒë·ªïi (%)']}% ({int(row['Total_Changes'])} KH thay ƒë·ªïi tr√™n {int(row['Total_Checks'])} l∆∞·ª£t ki·ªÉm tra)")

    doc.add_paragraph("- C√°c ƒëi·ªán l·ª±c c√≥ t·ª∑ l·ªá thay ƒë·ªïi th·∫•p nh·∫•t:")
    for idx, row in bottom_3.iterrows():
        doc.add_paragraph(f"  ‚Ä¢ {row['Area']}: {row['T·ª∑ l·ªá thay ƒë·ªïi (%)']}% ({int(row['Total_Changes'])} KH thay ƒë·ªïi tr√™n {int(row['Total_Checks'])} l∆∞·ª£t ki·ªÉm tra)")

    # ƒê·ªïi t√™n c·ªôt
    column_mapping = {
        'Area': 'ƒêi·ªán l·ª±c',
        'Total_Checks': 'T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra',
        'Total_Changes': 'S·ªë KH c√≥ thay ƒë·ªïi'
    }
    df_export = df_summary.rename(columns=column_mapping)

    # L√†m tr√≤n s·ªë v√† x·ª≠ l√Ω NaN
    df_export['T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra'] = df_export['T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra'].fillna(0).round(0).astype(int)
    df_export['S·ªë KH c√≥ thay ƒë·ªïi'] = df_export['S·ªë KH c√≥ thay ƒë·ªïi'].fillna(0).round(0).astype(int)

    # Add data table
    doc.add_heading('3. B·∫£ng t·ªïng h·ª£p:', level=1)
    table = doc.add_table(rows=1, cols=len(df_export.columns))
    table.style = 'Table Grid'
    hdr_cells = table.rows[0].cells
    for i, column in enumerate(df_export.columns):
        hdr_cells[i].text = column

    for index, row in df_export.iterrows():
        if row['ƒêi·ªán l·ª±c'] and str(row['ƒêi·ªán l·ª±c']).strip().lower() not in ['nan', 'ƒë∆°n v·ªã']:
            row_cells = table.add_row().cells
            for i, item in enumerate(row):
                if isinstance(item, float) and 't·ª∑ l·ªá' in df_export.columns[i].lower():
                    row_cells[i].text = f"{item:.2f}%"
                else:
                    row_cells[i].text = f"{item}"

    # Add Charts
    doc.add_heading('4. Bi·ªÉu ƒê·ªì So S√°nh:', level=1)
    doc.add_picture(chart_buf, width=Inches(6))

    doc.add_heading('5. Bi·ªÉu ƒê·ªì T·ª∑ L·ªá thay ƒë·ªïi vs kh√¥ng thay ƒë·ªïi:', level=1)
    doc.add_picture(pie_chart_buf, width=Inches(4.5))

    buf = BytesIO()
    doc.save(buf)
    buf.seek(0)
    return buf

# MAIN APP

st.set_page_config(page_title="ƒê√°nh gi√° ki·ªÉm tra √°p gi√°", layout="wide")
st.title("ƒê√°nh gi√° c√¥ng t√°c ki·ªÉm tra √°p gi√°")

uploaded_file = st.file_uploader("T·∫£i l√™n file Excel d·ªØ li·ªáu", type=["xlsx"])

if uploaded_file is not None:
    df = pd.read_excel(uploaded_file)
    df.columns = df.columns.str.strip()
    df.columns = ['Stt', 'Area', 'Check_SH_2plus', 'Check_HCSN', 'Check_Production', 'Check_KDDV', 'Check_PriceRate', 'Check_SH_Level3', 'Total_Checks', 'Total_Changes']

    df_summary = df[['Area', 'Total_Checks', 'Total_Changes']].copy()
    df_summary['Total_Checks'] = pd.to_numeric(df_summary['Total_Checks'], errors='coerce')
    df_summary['Total_Changes'] = pd.to_numeric(df_summary['Total_Changes'], errors='coerce')
    df_summary = df_summary[df_summary['Area'].notna()]
    df_summary['Area'] = df_summary['Area'].astype(str)
    df_summary = df_summary[df_summary['Area'].str.strip().str.lower() != 't·ªïng c·ªông']

    total_checks = df_summary['Total_Checks'].sum()
    total_changes = df_summary['Total_Changes'].sum()
    df_summary['T·ª∑ l·ªá thay ƒë·ªïi (%)'] = (df_summary['Total_Changes'] / df_summary['Total_Checks'] * 100).round(2)

    # Bi·ªÉu ƒë·ªì c·ªôt ƒë√¥i
    fig, ax = plt.subplots(figsize=(12,6))
    x = df_summary['Area']
    bar_width = 0.35
    index = range(len(x))

    ax.bar(index, df_summary['Total_Checks'], bar_width, label='T·ªïng s·ªë l∆∞·ª£ng ki·ªÉm tra')
    ax.bar([i + bar_width for i in index], df_summary['Total_Changes'], bar_width, label='S·ªë KH c√≥ thay ƒë·ªïi')

    ax.set_xlabel('ƒêi·ªán l·ª±c')
    ax.set_ylabel('S·ªë l∆∞·ª£ng')
    ax.set_title('So s√°nh gi·ªØa T·ªïng s·ªë ki·ªÉm tra v√† S·ªë KH c√≥ thay ƒë·ªïi')
    ax.set_xticks([i + bar_width / 2 for i in index])
    ax.set_xticklabels(x, rotation=90)
    ax.legend()
    plt.tight_layout()

    chart_buf = BytesIO()
    fig.savefig(chart_buf)
    chart_buf.seek(0)
    st.pyplot(fig)

    # Pie chart
    fig_pie, ax_pie = plt.subplots()
    ax_pie.pie([total_changes, total_checks - total_changes], labels=['C√≥ thay ƒë·ªïi', 'Kh√¥ng thay ƒë·ªïi'], autopct='%1.1f%%', colors=['#ff9999','#66b3ff'])
    ax_pie.set_title('T·ª∑ l·ªá KH c√≥ thay ƒë·ªïi vs kh√¥ng thay ƒë·ªïi')
    pie_chart_buf = BytesIO()
    fig_pie.savefig(pie_chart_buf)
    pie_chart_buf.seek(0)
    st.pyplot(fig_pie)

    st.dataframe(df_summary)

    today = datetime.today().strftime('%Y-%m-%d')
    word_file = create_word_report(df_summary, chart_buf, pie_chart_buf, total_checks)

    st.download_button(
        label="üìÑ T·∫£i b√°o c√°o Word",
        data=word_file,
        file_name=f'Bao_cao_kiem_tra_ap_gia_{today}.docx',
        mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )
